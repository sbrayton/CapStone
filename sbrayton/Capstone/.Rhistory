count(word, sentiment, sort = TRUE) %>%
ungroup()
datatable(bing_word_counts)
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
library(reshape2)
tidy %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 200)
grpRmByAvgPrice <- as.data.frame(Airbnb$room_type, Airbnb$price)
grpRmByAvgPrice <- c(Airbnb$room_type, Airbnb$price)
View(grpRmByAvgPrice)
grpRmByAvgPrice <- as.data.frame(grpRmByAvgPrice)
View(grpRmByAvgPrice)
View(grpRmByAvgPrice)
table(Airbnb$room_type, Airbnb$price)
grpRmByAvgPrice <- table(Airbnb$room_type, Airbnb$price)
grpRmByAvgPrice <- as.data.frame(grpRmByAvgPrice)
View(grpRmByAvgPrice)
grpRmByAvgPrice <- subset(Airbnb$room_type, Airbnb$price)
HeadAcheData <- read.csv("Q3/Headache_Panel.csv", header = T, stringsAsFactors=FALSE)
View(HeadAcheData)
install.packages("anocva")
aov.HeadAcheData <- aov(HeadAcheData$X..Private.Label~ HeadAcheData$Age,HeadAcheData$Income_quintile, HeadAcheData$Education ,data=HeadAcheData)
aov.HeadAcheData <- aov(HeadAcheData$X..Private.Label~ HeadAcheData$Age + HeadAcheData$Income_quintile + HeadAcheData$Education ,data=HeadAcheData)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/07_D3M/Exam")
pacman::p_load(tidyr, ggplot2,  reader, forcats, DT, broom, tidyverse, shiny, dplyr,stringr, sjPlot, sjmisc, questionr, stargazer, rio, ggeffects, FSelector,rio,rpart,tree,ranger,readr,knitr)
beerData <- import("Q1A_Q1B.xlsx" , sheet = "Q1_BeerData")
beerData$State <- as.factor(beerData$State)
beerData$Type <- as.factor(beerData$Type)
beerData$census_region <- as.factor(beerData$census_region)
#with coors
calcMrktShare <- sum(beerData$Revenue_AB, na.rm = TRUE)  +  sum(beerData$Revenue_SAB, na.rm = TRUE) + (sum(beerData$Revenue_COORS, na.rm = TRUE))
wCoors <- 100*(calcMrktShare / sum(beerData$Revenue_Total))
#without coors
calcMrktShare <- sum(beerData$Revenue_AB, na.rm = TRUE) +    sum(beerData$Revenue_SAB, na.rm = TRUE )
woCoors <- 100*(calcMrktShare / ((sum(beerData$Revenue_Total )
)) )
plotMrktShare <- c(wCoors, woCoors)
barplot(plotMrktShare ,space = 0,col = c("navyblue", "cornsilk") , xlab="Percent Market", main = "Calculated Market Shares", horiz = TRUE ,ylim=c(0,3)
,xlim = c(0,100)   )
legend("topright", legend = c("w/Coors", "w/o Coors"), fill = c("navyblue", "cornsilk"))
light <-  subset(beerData,  beerData$Type == "Light")
#with coors
calcMrktShare <- sum(light$Revenue_AB, na.rm = TRUE) +  sum(light$Revenue_COORS, na.rm = TRUE)+  sum(light$Revenue_Other, na.rm = TRUE) +  sum(light$Revenue_SAB, na.rm = TRUE)
lightwCoors <- 100*(calcMrktShare / sum(beerData$Revenue_Total))
#without coors
calcMrktShare <- sum(light$Revenue_AB, na.rm = TRUE) +   sum(light$Revenue_Other, na.rm = TRUE) +  sum(light$Revenue_SAB, na.rm = TRUE)
lightwoCoors <- 100*(calcMrktShare / sum(beerData$Revenue_Total))
lightplotMrktShare <- c(lightwCoors, lightwoCoors)
barplot(lightplotMrktShare ,space = 0,col = c("navyblue", "cornsilk") , xlab="Percent Market", main = "Calculated Market Shares for Type Light", horiz = TRUE ,ylim=c(0,3)
,xlim = c(0,100)      )
legend("topright", legend = c("w/Coors", "w/o Coors"), fill = c("navyblue", "cornsilk"))
regular <-  subset(beerData,  beerData$Type == "Regular")
#with coors
calcMrktShare <- sum(regular$Revenue_AB, na.rm = TRUE) +  sum(regular$Revenue_COORS, na.rm = TRUE)+  sum(regular$Revenue_Other, na.rm = TRUE) +  sum(regular$Revenue_SAB, na.rm = TRUE)
regularwCoors <- 100*(calcMrktShare / sum(beerData$Revenue_Total))
#without coors
calcMrktShare <- sum(regular$Revenue_AB, na.rm = TRUE) +   sum(regular$Revenue_Other, na.rm = TRUE) +  sum(regular$Revenue_SAB, na.rm = TRUE)
regularwoCoors <- 100*(calcMrktShare / sum(beerData$Revenue_Total))
regularplotMrktShare <- c(regularwCoors, regularwoCoors)
barplot(regularplotMrktShare ,space = 0,col = c("navyblue", "cornsilk") , xlab="Percent Market", main = "Calculated Market Shares for Type Regular", horiz = TRUE ,ylim=c(0,3), xlim = c(0,100)      )
legend("topright", legend = c("w/Coors", "w/o Coors"), fill = c("navyblue", "cornsilk"))
#Here I am going to load the data
Airbnb <- read.csv("listings2.csv", header = T, stringsAsFactors=FALSE)
# YOU SHOULD TAKE A LOOK AT THE DATA
#View(Airbnb)
#Remove unwanted columns
Airbnb <- dplyr::select(Airbnb, -c(listing_url, scrape_id, name, experiences_offered, thumbnail_url: host_url, host_response_time: host_identity_verified,  neighbourhood))
#Clean up price (remove $ sign so its numeric)
Airbnb$price = as.numeric(gsub("\\$", "", Airbnb$price))
#I am going to use the aggregate function to get the average price by room type
avgRmTypePrice <- aggregate(Airbnb$price ~ Airbnb$room_type, Airbnb, mean)
#Here i want to change the names of my columns before I plot them
names(avgRmTypePrice)<-c("room_type", "price")
#finally I will plot my average room types in a barchart so that I can visualize them
p<-ggplot(data=avgRmTypePrice, aes(x=room_type, y=price)) +
geom_bar(stat="identity")
p
kable(avgRmTypePrice, align = 'c')
sroom <-subset(Airbnb, Airbnb$room_type == 'Shared room',  select=(price))
#change the NA values to 0 so that we can run the mean function
sroom[is.na(sroom)] <- 0
#take the mean of the clean column
sharedRmMean <- mean(sroom$price)
#
#
#
# #/Users/shamekabrayton/Dropbox/NYU/02_Module/07_D3M/Exam
# # Importing dataset
# carRental <- read_csv('~/Dropbox/NYU/02_Module/07_D3M/Exam/Q5_Fare_Predictor.csv')
#
# # Convert daily rates to numeric
# carRental$Rate  <- as.numeric(gsub("\\$", "", carRental$`Daily Rental Rate`))
#
# # Peek at the data
# head(carRental)
#
# # Change column names to something more R-friendly
# names(carRental) <- c("airportCode",
#                       "lat",
#                       "long",
#                       "compNm",
#                       "carType",
#                       "wkdyOrWknd",
#                       "inTermPckUp",
#                       "hol",
#                       "airpTffcQint",
#                       "BizIdxStd",
#                       "numCarRentCo",
#                       "dailyRentRts",
#                       "val",
#                       "rate"
#                       )
#
# # Peek at the data
# head(carRental)
#
# # Remove observations with nulls
# # carRental <- na.omit(carRental)
#
# # Convert the original data into a dataframe
# carRental <- as.data.frame(carRental)
#
# # Create Test & Train Data (method 1)
# train <- dplyr::filter(carRental, val == "Training")
# test  <- dplyr::filter(carRental, val == "Validation")
#
# # Peek at the distribution of train vs test data (number of records)
# dim(test)
# dim(train)
#
# # # Create Test & Train Data (method 2)
# # train.idx <- sample(nrow(carRental), 2/3 * nrow(carRental))
# # train <- carRental.train <- carRental[train.idx, ]
# # test <- carRental.test <- carRental[-train.idx, ]
# #
# # # Peek at the distribution of train vs test data (number of records)
# # dim(test)
# # dim(train)
#
# # # Make numCarRentCo a factor (not needed)
# # carRental$numCarRentCo <- factor(carRental$numCarRentCo)
#
# # Prediction: Run a random forest tree with desired variables
# rft <- rg.carRental <- ranger(rate ~
#                       compNm +
#                       carType +
#                       wkdyOrWknd +
#                       inTermPckUp +
#                       hol +
#                       airpTffcQint +
#                       BizIdxStd +
#                       numCarRentCo,
#     data = train,num.trees = 1000, write.forest = TRUE)
# pred.carRental <- predict(rg.carRental, dat = test)
# table(test$rate, pred.carRental$predictions)
sroom <-subset(Airbnb, Airbnb$room_type == 'Shared room',  select=(price))
#change the NA values to 0 so that we can run the mean function
sroom[is.na(sroom)] <- 0
#take the mean of the clean column
sharedRmMean <- mean(sroom$price)
sharedRmMean
sroom <-subset(Airbnb, Airbnb$room_type == 'Shared room',  select=(price))
#change the NA values to 0 so that we can run the mean function
sroom[is.na(sroom)] <- 0
#take the mean of the clean column
sharedRmMean <- mean(sroom$price)
sharedRmMean
setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/07_D3M/Exam")
# IMPORTING DATASET
headachePanel <- read_csv("~/Dropbox/NYU/02_Module/07_D3M/Exam/Headache_Panel.csv")
# CONVERT DESIRED NON-NUMERIC COLUMNS INTO FACTORS TO FACILITATE SUMMARY AND LINEAR REGRESSION
headachePanel$Age <- as.factor(headachePanel$Age)
headachePanel$Education <- as.factor(headachePanel$Education)
headachePanel$Income_quintile <- as.factor(headachePanel$Income_quintile)
headachePanel
View(headachePanel)
# USING SUBSET FUNCTION TO CREATE SUBSET OF DESIRED VARIABLES
headachePanel <- subset(headachePanel, select=c(Age, Education, Income_quintile, `% Private Label`))
View(headachePanel)
# IMPORTING DATASET
headachePanel <- read_csv("~/Dropbox/NYU/02_Module/07_D3M/Exam/Headache_Panel.csv")
# USING SUBSET FUNCTION TO CREATE SUBSET OF DESIRED VARIABLES
headachePanel <- subset(headachePanel, select=c(Age, Education, Income_quintile, `% Private Label`))
# CONVERT DESIRED NON-NUMERIC COLUMNS INTO FACTORS TO FACILITATE SUMMARY AND LINEAR REGRESSION
headachePanel$Age <- as.factor(headachePanel$Age)
headachePanel$Education <- as.factor(headachePanel$Education)
headachePanel$Income_quintile <- as.factor(headachePanel$Income_quintile)
str(headachePanel)
# CONVERT DEPENDENT VARIABLE INTO A PERCENT FOR REGRESSION
headachePanel$`% Private Label` <- as.numeric(sub("%","",headachePanel$`% Private Label`))/100
str(headachePanel)
summary(headachePanel)
k <- summary(headachePanel)
kable(k)
require(demography)
plot(fr.mort)
plot(fr.mort, series = `% Private Label`)
# MULTIPLE LINEAR REGRESSION OF '% PRIVATE LABEL' AGAINST 3 DEMOGRAPHICS
fit <- lm(headachePanel$`% Private Label` ~ headachePanel$Age + headachePanel$Income_quintile + headachePanel$Education,
data = headachePanel, na.action = "na.exclude")
# MULTIPLE LINEAR REGRESSION OF '% PRIVATE LABEL' AGAINST 3 DEMOGRAPHICS
fit <- lm(headachePanel$`% Private Label` ~ headachePanel$Age + headachePanel$Income_quintile + headachePanel$Education,
data = headachePanel, na.action = "na.exclude")
fit
# MULTIPLE LINEAR REGRESSION OF '% PRIVATE LABEL' AGAINST 3 DEMOGRAPHICS
fit <- lm(headachePanel$`% Private Label` ~ headachePanel$Age + headachePanel$Income_quintile + headachePanel$Education,
data = headachePanel, na.action = "na.exclude")
kable(fit)
# MULTIPLE LINEAR REGRESSION OF '% PRIVATE LABEL' AGAINST 3 DEMOGRAPHICS
fit <- lm(headachePanel$`% Private Label` ~ headachePanel$Age + headachePanel$Income_quintile + headachePanel$Education,
data = headachePanel, na.action = "na.exclude")
kable(fitted.values)
fitted.values
fit
str(fit)
fit$coefficients
kable(fit$coefficients)
g <-as.data.frame(fit$coefficients)
g
fit
g
fit
kable(fit$coefficients)
kable(fit$coefficients)
kable(fit$coefficients)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/07_D3M/Exam")
pacman::p_load(tidyr, ggplot2,  reader, forcats, DT, broom, tidyverse, shiny, dplyr,stringr, sjPlot, sjmisc, questionr, stargazer, rio, ggeffects, FSelector,rio,rpart,tree,ranger,readr,knitr)
#Here I am going to load the data
Airbnb <- read.csv("listings2.csv", header = T, stringsAsFactors=FALSE)
# YOU SHOULD TAKE A LOOK AT THE DATA
#View(Airbnb)
#Remove unwanted columns
Airbnb <- dplyr::select(Airbnb, -c(listing_url, scrape_id, name, experiences_offered, thumbnail_url: host_url, host_response_time: host_identity_verified,  neighbourhood))
#Clean up price (remove $ sign so its numeric)
Airbnb$price = as.numeric(gsub("\\$", "", Airbnb$price))
#I am going to use the aggregate function to get the average price by room type
avgRmTypePrice <- aggregate(Airbnb$price ~ Airbnb$room_type, Airbnb, mean)
avgRmTypePrice
View(Airbnb)
#Here I am going to load the data
Airbnb <- read.csv("listings2.csv", header = T, stringsAsFactors=FALSE)
# YOU SHOULD TAKE A LOOK AT THE DATA
#View(Airbnb)
t <- subset(Airbnb, c(Airbnb$room_type, Airbnb$price))
t <- subset(Airbnb, (Airbnb$room_type, Airbnb$price))
t <- subset(Airbnb, (Airbnb$room_typ,  Airbnb$price))
t <- c(Airbnb$room_typ,  Airbnb$price)
t <- as.data.frame( c(Airbnb$room_typ,  Airbnb$price))
View(t)
t <-  c(Airbnb$room_typ,  Airbnb$price)
t <- as.data.frame(t)
View(t)
t <-  c(Airbnb$price)
r<- (Airbnb$room_typ)
t <- as.data.frame(t,r)
View(t)
#I am going to use the aggregate function to get the average price by room type
avgRmTypePrice <- aggregate(t$price ~ t$room_type, t, mean)
names(t)
#I am going to use the aggregate function to get the average price by room type
avgRmTypePrice <- aggregate(Airbnb$price ~ Airbnb$room_type, Airbnb, mean)
#Remove unwanted columns
Airbnb <- dplyr::select(Airbnb, -c(listing_url, scrape_id, name, experiences_offered, thumbnail_url: host_url, host_response_time: host_identity_verified,  neighbourhood))
#I am going to use the aggregate function to get the average price by room type
avgRmTypePrice <- aggregate(Airbnb$price ~ Airbnb$room_type, Airbnb, mean)
#Clean up price (remove $ sign so its numeric)
Airbnb$price = as.numeric(gsub("\\$", "", Airbnb$price))
#Clean up price (remove $ sign so its numeric)
Airbnb$price = as.numeric(gsub("\\$", "", Airbnb$price))
shiny::runApp('Dropbox/NYU/__Git/drive-download-20170916T212525Z-001')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
install.packages("shinysky")
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyr, ggplot2,  reader, forcats, DT, broom, tidyverse, shiny, dplyr, sjPlot, sjmisc, questionr, stargazer, rio, ggeffects, FSelector)
shoot <- import("/Users/shamekabrayton/Dropbox/NYU/98_Capstone2018/data/nba_touch_data_2017.csv")
shoot <- import("~/Dropbox/NYU/98_Capstone2018/data/nba_touch_data_2017.csv")
shoot <- import("~/Dropbox/NYU/98_Capstone2018/data/nba_touch_data_2017.csv")
offense <- as.data.frame(cbind(chance_id=(shoot$chance_id),
ballhandler_id=(shoot$ballhandler_id),
defender_id=(shoot$defender_id),
start_shot_clock=(shoot$start_shot_clock),
basket_distance=(shoot$basket_distance),
led_to_shot=(shoot$let_to_shot),
shot_result=(shoot$shot_result)
))
offense <- na.omit(offense)
offense$shot_result_num <- as.numeric(offense$shot_result)
offense$shot_result_num[offense$shot_result_num==1] <- 0
offense$shot_result_num[offense$shot_result_num==2] <- 1
#adding three points and two points category
offense$distance<-as.numeric(offense$basket_distance)
if ( offense$distance >= 23){
mutate(offense,distance=="Three")
} else {
mutate(offense,distance=="Two")
}
offense$distance<-as.numeric(offense$basket_distance)
str(offense)
offense$distance[is.na(offense$distance)] <- 0
offense$distance<-as.numeric(offense$basket_distance)
str(offense)
offense$distance
shoot <- import("~/Dropbox/NYU/98_Capstone2018/data/nba_touch_data_2017.csv")
offense <- as.data.frame(cbind(chance_id=(shoot$chance_id),
ballhandler_id=(shoot$ballhandler_id),
defender_id=(shoot$defender_id),
start_shot_clock=(shoot$start_shot_clock),
basket_distance=(shoot$basket_distance),
led_to_shot=(shoot$let_to_shot),
shot_result=(shoot$shot_result)
))
offense <- na.omit(offense)
offense$shot_result_num <- as.numeric(offense$shot_result)
offense$shot_result_num[offense$shot_result_num==1] <- 0
offense$shot_result_num[offense$shot_result_num==2] <- 1
offense$distance
offense <- as.data.frame(cbind(chance_id=(shoot$chance_id),
ballhandler_id=(shoot$ballhandler_id),
defender_id=(shoot$defender_id),
start_shot_clock=(shoot$start_shot_clock),
basket_distance=(shoot$basket_distance),
led_to_shot=(shoot$let_to_shot),
shot_result=(shoot$shot_result)
))
offense$distance<-as.numeric(offense$basket_distance)
offense$distance[is.na(offense$distance)] <- 0
str(offense)
if ( offense$distance >= 23){
mutate(offense,distance=="Three")
} else {
mutate(offense,distance=="Two")
}
offense$distance<-as.numeric(offense$basket_distance)
offense$distance
offense$distance<-as.double (offense$basket_distance)
offense$distance
offense$basket_distance
offense$distance<-as.integer(offense$basket_distance)
offense$distance
View(offense)
offense$distance<-offense$basket_distance
offense$distance
offense$distance
offense$distance
str(offense)
str(offense)
indx <- sapply(offense$distance, is.factor)
offense$distance[indx] <- lapply(offense$distance[indx], function(x) as.numeric(as.character(x)))
str(offense)
indx <- sapply(offense$distance, is.factor)
indx
offense$indx <- sapply(offense$distance, is.factor)
View(offense)
offense$distance[indx]
offense$distance[indx] <- lapply(offense$distance[indx], function(x) as.numeric(as.character(x)))
str(offense$distance)
offense$distance
offense$distance<-as.character(offense$basket_distance)
str(offense$distance)
offense$distance<-as.numeric(offense$basket_distance)
str(offense$distance)
offense$distance<-offense$basket_distance
offense$distance[is.na(offense$distance)] <- 0
offense$distance<-as.character(offense$basket_distance)
offense$distance<-as.double(offense$basket_distance)
offense$distance<-offense$basket_distance
offense$distance[is.na(offense$distance)] <- 0
offense$distance<-as.character(offense$basket_distance)
str(offense$distance)
apply(offense$distance, 2, as.numeric)
sapply(offense$distance, as.numeric)
offense$distance<-sapply(offense$distance, as.numeric)
offense$distance
str(offense$distance)
str(offense)
if ( offense$distance >= 23){
mutate(offense,distance=="Three")
} else {
mutate(offense,distance=="Two")
}
if ( offense$distance >= 23){
mutate(offense,distance=="Three")
}
if ( offense$distance >= 23){
offense$distance
}
for (dist in offense$distance){
if ( dist >= 23){
dist
}
}
for (dist in offense$distance){
if ( dist >= 23){
offense$dist<-dist
}
}
for (dist in offense$distance){
dist
}
for (dist in offense$distance){
print(dist)
}
nrow(offence$distance)
nrow(offense$distance)
N(offense)
nrow(offense)
for (i in 1:nrow(offense)) {
if (!i %% 2){
next
}
print(i)
for (i in row(offense)) {
if (offense$distance >=23){
offense$dist<-3
}
print(i)
}
for (i in row(offense)) {
if (offense$distance >=23){
offense$dist<-3
}
print(i)
}
row(offense)
for (i in row(offense)) {
print(i$distnace)
}
row(offense)
offense$distance<- ifelse(offense$distance>=23, 3, 2)
offense
View(offense)
offense$distance<- ifelse(offense$distance>=23, 3, 2)
offense
offense$distance<- ifelse(offense$distance>=23 && offense$shot_result==TRUE, 3, 2)
offense$distance<- NULL
offense$dist<- NULL
offense$indx<- NULL
offense$distance<-offense$basket_distance
offense$distance[is.na(offense$distance)] <- 0
offense$distance<-as.character(offense$basket_distance)
offense$distance<-sapply(offense$distance, as.numeric)
str(offense)
offense$distance<- ifelse(offense$distance>=23 && offense$shot_result==TRUE, 3, 2)
offense$distance<-offense$basket_distance
offense$distance[is.na(offense$distance)] <- 0
offense$distance<-as.character(offense$basket_distance)
offense$distance<-sapply(offense$distance, as.numeric)
offense$dist<- ifelse(offense$distance>=23 & offense$shot_result==TRUE, 3, 2)
offense$dist<- ifelse((offense$distance>=23 & offense$shot_result==TRUE), 3, 2)
offense$dist<- ifelse((offense$distance>=23 & offense$shot_result==TRUE), 3, NA)
offense$dist<- ifelse(offense$distance>=23 , 3, NA)
offense$dist<- ifelse(offense$shot_result==FALSE , NA)
#adding three points and two points category
offense$distance<-offense$basket_distance
offense$distance[is.na(offense$distance)] <- 0
offense$distance<-as.character(offense$basket_distance)
offense$distance<-sapply(offense$distance, as.numeric)
offense$dist<- ifelse(offense$distance>=23 , 3, NA)
View(offense)
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
install.packages("shinysky")
install.packages("shinysky")
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
