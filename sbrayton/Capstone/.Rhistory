axis.ticks.length = unit(0, "lines"),
legend.background = element_rect(fill = bg_color, color = bg_color),
legend.position = "bottom",
legend.key = element_blank(),
legend.text = element_text(size = rel(1.0))
)
}
width = 50
height = 94 / 2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14
short_three_radius = 22
short_three_seasons = c("1994-95", "1995-96", "1996-97")
court_points = data.frame(
x = c(width / 2, width / 2, -width / 2, -width / 2, width / 2),
y = c(height, 0, 0, height, height),
desc = "perimeter"
)
court_points = rbind(court_points , data.frame(
x = c(outer_key_width / 2, outer_key_width / 2, -outer_key_width / 2, -outer_key_width / 2),
y = c(0, key_height, key_height, 0),
desc = "outer_key"
))
court_points = rbind(court_points , data.frame(
x = c(-backboard_width / 2, backboard_width / 2),
y = c(backboard_offset, backboard_offset),
desc = "backboard"
))
court_points = rbind(court_points , data.frame(
x = c(0, 0), y = c(backboard_offset, backboard_offset + neck_length), desc = "neck"
))
foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)
foul_circle_top = filter(foul_circle, y > key_height) %>% mutate(desc = "foul_circle_top")
foul_circle_bottom = filter(foul_circle, y < key_height) %>% mutate(desc = "foul_circle_bottom")
hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) %>% mutate(desc = "hoop")
restricted = circle_points(center = c(0, hoop_center_y), radius = 4) %>%
filter(y >= hoop_center_y) %>%
mutate(desc = "restricted")
three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) %>% filter(y >= three_point_side_height)
short_three_circle = circle_points(center = c(0, hoop_center_y), radius = short_three_radius) %>% filter(y >= hoop_center_y)
three_point_line = data.frame(
x = c(three_point_side_radius, three_point_side_radius, three_point_circle$x, -three_point_side_radius, -three_point_side_radius),
y = c(0, three_point_side_height, three_point_circle$y, three_point_side_height, 0),
desc = "three_point_line"
)
short_three_line = data.frame(
x = c(three_point_side_radius, three_point_side_radius, short_three_circle$x, -three_point_side_radius, -three_point_side_radius),
y = c(0, hoop_center_y, short_three_circle$y, hoop_center_y, 0),
desc = "short_three_line"
)
court_without_three = rbind(court_points , foul_circle_top, foul_circle_bottom, hoop, restricted)
court_points = rbind(court_without_three, three_point_line)
court_points = mutate(court_points , dash = (desc == "foul_circle_bottom"))
short_three_court_points = rbind(court_without_three, short_three_line)
short_three_court_points = mutate(short_three_court_points , dash = (desc == "foul_circle_bottom"))
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
theme_court(base_size = 22)
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
theme_court(base_size = 22)
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
theme_court(base_size = 22)
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
theme_court(base_size = 22)
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25))
short_three_court = ggplot() +
geom_path(data = short_three_court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25))
short_three_court = ggplot() +
geom_path(data = short_three_court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25))
theme_court = function(base_size = 16) {
theme_bw(base_size) +
theme(
text = element_text(color = "#f0f0f0"),
plot.background = element_rect(fill = "#ffecf2", color = "#ffecf2"),
panel.background = element_rect(fill = "#ffecf2", color = "#ffecf2"),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks.length = unit(0, "lines"),
legend.background = element_rect(fill = "#ffecf2", color = "#ffecf2"),
legend.position = "bottom",
legend.key = element_blank(),
legend.text = element_text(size = rel(1.0))
)
}
circle_points = function(center = c(0, 0), radius = 1, npoints = 360) {
angles = seq(0, 2 * pi, length.out = npoints)
return(data.frame(x = center[1] + radius * cos(angles),
y = center[2] + radius * sin(angles)))
}
theme_court = function(base_size = 16) {
theme_bw(base_size) +
theme(
text = element_text(color = "#f0f0f0"),
plot.background = element_rect(fill = "#ffecf2", color = "#ffecf2"),
panel.background = element_rect(fill = "#ffecf2", color = "#ffecf2"),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks.length = unit(0, "lines"),
legend.background = element_rect(fill = "#ffecf2", color = "#ffecf2"),
legend.position = "bottom",
legend.key = element_blank(),
legend.text = element_text(size = rel(1.0))
)
}
width = 50
height = 94 / 2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14
short_three_radius = 22
short_three_seasons = c("1994-95", "1995-96", "1996-97")
court_points = data.frame(
x = c(width / 2, width / 2, -width / 2, -width / 2, width / 2),
y = c(height, 0, 0, height, height),
desc = "perimeter"
)
court_points = rbind(court_points , data.frame(
x = c(outer_key_width / 2, outer_key_width / 2, -outer_key_width / 2, -outer_key_width / 2),
y = c(0, key_height, key_height, 0),
desc = "outer_key"
))
court_points = rbind(court_points , data.frame(
x = c(-backboard_width / 2, backboard_width / 2),
y = c(backboard_offset, backboard_offset),
desc = "backboard"
))
court_points = rbind(court_points , data.frame(
x = c(0, 0), y = c(backboard_offset, backboard_offset + neck_length), desc = "neck"
))
foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)
foul_circle_top = filter(foul_circle, y > key_height) %>% mutate(desc = "foul_circle_top")
foul_circle_bottom = filter(foul_circle, y < key_height) %>% mutate(desc = "foul_circle_bottom")
hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) %>% mutate(desc = "hoop")
restricted = circle_points(center = c(0, hoop_center_y), radius = 4) %>%
filter(y >= hoop_center_y) %>%
mutate(desc = "restricted")
three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) %>% filter(y >= three_point_side_height)
short_three_circle = circle_points(center = c(0, hoop_center_y), radius = short_three_radius) %>% filter(y >= hoop_center_y)
three_point_line = data.frame(
x = c(three_point_side_radius, three_point_side_radius, three_point_circle$x, -three_point_side_radius, -three_point_side_radius),
y = c(0, three_point_side_height, three_point_circle$y, three_point_side_height, 0),
desc = "three_point_line"
)
short_three_line = data.frame(
x = c(three_point_side_radius, three_point_side_radius, short_three_circle$x, -three_point_side_radius, -three_point_side_radius),
y = c(0, hoop_center_y, short_three_circle$y, hoop_center_y, 0),
desc = "short_three_line"
)
court_without_three = rbind(court_points , foul_circle_top, foul_circle_bottom, hoop, restricted)
court_points = rbind(court_without_three, three_point_line)
court_points = mutate(court_points , dash = (desc == "foul_circle_bottom"))
short_three_court_points = rbind(court_without_three, short_three_line)
short_three_court_points = mutate(short_three_court_points , dash = (desc == "foul_circle_bottom"))
court = ggplot() +
geom_path(data = court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
theme_court(base_size = 22)
short_three_court = ggplot() +
geom_path(data = short_three_court_points,
aes(x = x, y = y, group = desc, linetype = dash),
color = "#999999") +
scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
coord_fixed(ylim = c(0, 35), xlim = c(-25, 25)) +
theme_court(base_size = 22)
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
#setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/07_Data Decision Data Making/Exam")
pacman::p_load(DBI,rJava,tidyr,RJDBC,RMySQL, ggplot2,  reader, forcats, DT, broom, tidyverse, shiny, dplyr,dbplyr,stringr, sjPlot, sjmisc, questionr, stargazer, rio, ggeffects, FSelector)
#setting up the connection string to the database
mySqlCreds <- list(dbhostname = "52.203.27.250",
dbname   = "blownAway",
username = "BlownAway",
pass = "blownAway123!",
port = 3306
)
drv <- dbDriver("MySQL")
#pull data from the table into a variable
#connection string to the database
con<-dbConnect(drv, host=mySqlCreds$dbhostname, dbname=mySqlCreds$dbname,
user=mySqlCreds$username, password=mySqlCreds$pass, port = mySqlCreds$port)
#connect to database and pull query into a table
db_2017 <- tbl(con ,sql("
select b.ballhandler_id
,`False`
,`True`
,`NA`
,`Total Access`
from `blownAway`.`yr_2017` as b
left join (
select   ballhandler_id,count(*) as `False` from `blownAway`.`yr_2017`
where shot_result='False' 	group by ballhandler_id
)f on f.ballhandler_id = b.ballhandler_id
left join (
select   ballhandler_id,count(*) as `True` from `blownAway`.`yr_2017`
where shot_result='True' 	group by ballhandler_id
)t on t.ballhandler_id = b.ballhandler_id
left join (
select   ballhandler_id,count(*) as `NA` from `blownAway`.`yr_2017`
where shot_result='NA' 	group by ballhandler_id
)na   on na.ballhandler_id = b.ballhandler_id
left join (
select   ballhandler_id,count(*)as `Total Access` from `blownAway`.`yr_2017` 	group by ballhandler_id
)a on a.ballhandler_id = b.ballhandler_id
group by b.ballhandler_id,`False`,`True`,`NA` ,`Total Access`                        "))
#alter the table to a dataframe
db_2017<- as.data.frame(db_2017)
DataLng <- gather(db_2017, ballhandler, tot,2:4, factor_key=TRUE)
for (player in DataLng){
DataLng$percOfTot <- (DataLng$tot/DataLng$`Total Access`)
}
df<-  DataLng
df$Spend<-NULL
head(df)
#put it back into the proper matrix and reverse the gather
df<-spread(df, key = ballhandler, value = percOfTot)
shoot <- tbl(con ,sql("select * from blownAway.yr_2017"))
shoot<-as.data.frame(shoot)
offense <- as.data.frame(cbind(chance_id=(shoot$chance_id),
ballhandler_id=(shoot$ballhandler_id),
defender_id=(shoot$defender_id),
start_shot_clock=(shoot$start_shot_clock),
basket_distance=(shoot$basket_distance),
led_to_shot=(shoot$let_to_shot),
shot_result=(shoot$shot_result)
))
offense <- na.omit(offense)
offense$shot_result_num <- as.numeric(offense$shot_result)
offense$shot_result_num[offense$shot_result_num==1] <- 0
offense$shot_result_num[offense$shot_result_num==2] <- 1
rm(shoot)
sp<-offense%>%
group_by(ballhandler_id)%>%
summarise(shot_percentage=mean(shot_result_num))
#pull data from the table into a variable
#connection string to the database
con<-dbConnect(drv, host=mySqlCreds$dbhostname, dbname=mySqlCreds$dbname,
user=mySqlCreds$username, password=mySqlCreds$pass, port = mySqlCreds$port)
#connect to database and pull query into a table
db_2017_defence <- tbl(con ,sql("
select b.defender_id
,`False`
,`True`
,`NA`
,`Total Access`
from `blownAway`.`yr_2017` as b
left join (
select   defender_id,count(*) as `False` from `blownAway`.`yr_2017`
where shot_result='False' 	group by defender_id
)f on f.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `True` from `blownAway`.`yr_2017`
where shot_result='True' 	group by defender_id
)t on t.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `NA` from `blownAway`.`yr_2017`
where shot_result='NA' 	group by defender_id
)na   on na.defender_id = b.defender_id
left join (
select   defender_id,count(*)as `Total Access` from `blownAway`.`yr_2017` 	group by defender_id
)a on a.defender_id = b.defender_id
group by b.defender_id,`False`,`True`,`NA` ,`Total Access`                        "))
#alter the table to a dataframe
db_2017_defence<- as.data.frame(db_2017_defence)
DataLng_defence <- gather(db_2017_defence, defender, tot,2:4, factor_key=TRUE)
for (player in DataLng_defence){
DataLng_defence$percOfTot <- (DataLng_defence$tot/DataLng_defence$`Total Access`)
}
df_defence<-  DataLng_defence
df_defence$Spend<-NULL
head(df_defence)
#put it back into the proper matrix and reverse the gather
df_defence<-spread(df_defence, key = defender, value = percOfTot)
# get data drom database
# note: this chuck run smoothly, but the result dataframe has no "let_to_shot"
block <- tbl(con ,sql("select * from blownAway.yr_2017"))
block <-as.data.frame(block)
defense <- as.data.frame(cbind(chance_id=(block$chance_id),
defender_id=(block$defender_id),
ballhandler_id=(block$ballhandler_id),
start_shot_clock=(block$start_shot_clock),
basket_distance=(block$basket_distance),
led_to_shot=(block$let_to_shot), # let_to_shot doesnt show up in dataframe ?
shot_result=(block$shot_result)
))
defense <- na.omit(defense)
#
defense$shot_result_num <- as.numeric(defense$shot_result)
defense$shot_result_num[defense$shot_result_num==1] <- 0
defense$shot_result_num[defense$shot_result_num==2] <- 1
# omit the remove function now
# rm(block)
# total score lost per defender
score_lost<-defense%>%
group_by(defender_id)%>%
summarise( score_lost = sum (shot_result_num))
score_lost
# Note: Since the chunk above did not provide 'let to shot', flat file is used for following codes
# input csv data
touch_2017 <- read_csv("~/Capstone/nba_touch_data_2017.csv")
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
query <- sprintf("select b.defender_id
,`False`
,`True`
,`NA`
,`Total Access`
from `blownAway`.`yr_2017` as b
left join (
select   defender_id,count(*) as `False` from `blownAway`.`yr_2017`
where shot_result='False' 	group by defender_id
)f on f.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `True` from `blownAway`.`yr_2017`
where shot_result='True' 	group by defender_id
)t on t.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `NA` from `blownAway`.`yr_2017`
where shot_result='NA' 	group by defender_id
)na   on na.defender_id = b.defender_id
left join (
select   defender_id,count(*)as `Total Access` from `blownAway`.`yr_2017` 	group by defender_id
)a on a.defender_id = b.defender_id
group by b.defender_id,`False`,`True`,`NA` ,`Total Access`           ", table)
# Construct the fetching query
query <- sprintf("select b.defender_id
data <- dbGetQuery(db, query)
query <- sprintf("select b.defender_id
,`False`
,`True`
,`NA`
,`Total Access`
from `blownAway`.`yr_2017` as b
left join (
select   defender_id,count(*) as `False` from `blownAway`.`yr_2017`
where shot_result='False' 	group by defender_id
)f on f.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `True` from `blownAway`.`yr_2017`
where shot_result='True' 	group by defender_id
)t on t.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `NA` from `blownAway`.`yr_2017`
where shot_result='NA' 	group by defender_id
)na   on na.defender_id = b.defender_id
left join (
select   defender_id,count(*)as `Total Access` from `blownAway`.`yr_2017` 	group by defender_id
)a on a.defender_id = b.defender_id
group by b.defender_id,`False`,`True`,`NA` ,`Total Access`           ", table)
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
loadData <- function() {
# Connect to the database
db <- dbConnect(MySQL(), dbname = databaseName, host = options()$mysql$host,
port = options()$mysql$port, user = options()$mysql$user,
password = options()$mysql$password)
# Construct the fetching query
query <- sprintf("select b.defender_id
,`False`
,`True`
,`NA`
,`Total Access`
from `blownAway`.`yr_2017` as b
left join (
select   defender_id,count(*) as `False` from `blownAway`.`yr_2017`
where shot_result='False' 	group by defender_id
)f on f.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `True` from `blownAway`.`yr_2017`
where shot_result='True' 	group by defender_id
)t on t.defender_id = b.defender_id
left join (
select   defender_id,count(*) as `NA` from `blownAway`.`yr_2017`
where shot_result='NA' 	group by defender_id
)na   on na.defender_id = b.defender_id
left join (
select   defender_id,count(*)as `Total Access` from `blownAway`.`yr_2017` 	group by defender_id
)a on a.defender_id = b.defender_id
group by b.defender_id,`False`,`True`,`NA` ,`Total Access`           ", table)
# Submit the fetch query and disconnect
data <- dbGetQuery(db, query)
dbDisconnect(db)
data
print(data)
}
View(loadData)
print(loadData)
View(loadData)
View(loadData)
View(loadData)
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
r -f data.R
r -f data.R
r -f data.r
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
runApp('Dropbox/NYU/__Git/sbrayton/Capstone')
